// Generated by CoffeeScript 1.10.0

/**
 * PaymentController
 *
 * @description :: Server-side logic for managing Payments
 * @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers
 */
var passport;

passport = require('passport');

module.exports = {
  create_payment: function(req, res) {
    var Promise, Stripe;
    sails.log.debug("Hit the Payment controller/create_payment");
    sails.log.debug("Create payment params " + (JSON.stringify(req.body)));
    Stripe = require("stripe")(sails.config.stripe.stripe_secret);
    Promise = require('q');
    return Promise.all([
      Stripe.charges.create({
        source: req.body.stripe_token,
        description: 'Example charge',
        amount: parseInt(req.body.amount),
        currency: 'eur'
      }), Token.findOne({
        owner: req.body.user_id
      })
    ]).spread(function(stripe_charge, token) {
      sails.log.debug("Stripe charge " + (JSON.stringify(stripe_charge)));
      sails.log.debug("Token found " + (JSON.stringify(token)));
      sails.log.debug("Token amount " + token.amount);
      token.amount = token.amount + stripe_charge.amount;
      return Promise.all([
        token.save(), Transaction.create({
          user_id: req.body.user_id,
          amount: stripe_charge.amount,
          amount_refunded: stripe_charge.amount_refunded,
          stripe_id: stripe_charge.id,
          created: stripe_charge.created,
          failure_code: stripe_charge.failure_code,
          failure_message: stripe_charge.failure_message,
          paid: stripe_charge.paid,
          status: stripe_charge.status,
          last4: stripe_charge.source.last4
        })
      ]).spread(function(token, transaction) {
        sails.log.debug("Token saved " + (JSON.stringify(token)));
        sails.log.debug("Transaction saved " + (JSON.stringify(transaction)));
        return res.json({
          token: token,
          transaction: transaction
        });
      })["catch"](function(err) {
        if (err != null) {
          sails.log.debug("transaction create err " + (JSON.stringify(err)));
          return res.serverError(err);
        }
      });
    })["catch"](function(err) {
      if (err != null) {
        sails.log.debug("Stripe create error " + (JSON.stringify(err)));
        res.status(500);
        return res.json(err);
      }
    });
  },
  get_transactions: function(req, res) {
    var Promise;
    sails.log.debug("Hit the payment controller/get_transactions");
    sails.log.debug("Params " + (JSON.stringify(req.query)));
    Promise = require('q');
    return Promise.all([
      User.findOne({
        id: req.query.id
      }).populate('tokens').populate('transactions'), {
        charges: {
          vat: sails.config.stripe.vat,
          stripe_comm_precent: sails.config.stripe.stripe_comm_precent,
          stripe_comm_euro: sails.config.stripe.stripe_comm_euro
        }
      }
    ]).spread(function(user, charges) {
      sails.log.debug("Sripte stuff " + (JSON.stringify(charges)));
      return res.json({
        user: user,
        charges: charges
      });
    })["catch"](function(err) {
      sails.log.debug("User found err " + (JSON.stringify(err)));
      return res.serverError(err);
    });
  }
};
