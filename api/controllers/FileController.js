// Generated by CoffeeScript 1.10.0

/**
 * EventController
 *
 * @description :: Server-side logic for managing Files
 * @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers
 */
module.exports = {
  upload: function(req, res) {
    var AWS, Promise, s3, team_name, uploadFile;
    sails.log.debug("Hit FileController/upload");
    sails.log.debug("Params " + (JSON.stringify(req.body)));
    Promise = require('bluebird');
    sails.log.debug(JSON.stringify(req.body));
    team_name = req.body.team_name;
    team_name = team_name.replace(/\s/g, "");
    AWS = require('aws-sdk');
    AWS.config.update({
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    });
    s3 = Promise.promisifyAll(new AWS.S3());
    sails.log.debug("No space " + req.body.org_id + "/" + req.body.team_id + "/" + team_name);
    return uploadFile = req.file('file').upload({
      adapter: require('skipper-s3'),
      key: process.env.AWS_ACCESS_KEY_ID,
      secret: process.env.AWS_SECRET_ACCESS_KEY,
      saveAs: req.body.org_id + "/" + req.body.team_id + "/" + team_name + ".xls",
      bucket: 'subzapp'
    }, function(err, uploadedFiles) {
      if (err) {
        sails.log.debug("Upload error " + (JSON.stringify(err)));
        return res.negotiate(err);
      } else {
        sails.log.debug("Upload waheeeey " + (JSON.stringify(uploadedFiles[0])));
        return Promise.resolve(FileService.store_file_info(uploadedFiles[0], req.body.org_id, req.body.team_id, team_name, function(err, fts) {
          var params;
          sails.log.debug("FileService " + (JSON.stringify(fts)));
          params = {
            Bucket: 'subzapp',
            Delimiter: '/',
            Prefix: req.body.org_id + "/" + req.body.team_id + "/"
          };
          return [fts, s3.listObjectsAsync(params)];
        }).spread(function(fts, s3_object) {
          sails.log.debug("fts " + (JSON.stringify(fts)));
          sails.log.debug("s3 " + (JSON.stringify(s3_object)));
          return res.json({
            bucket_info: s3_object
          });
        })["catch"](function(err) {
          sails.log.debug("Chain " + err);
          return res.serverError(err);
        }));
      }
    });
  },
  parse_users: function(req, res) {
    var fs, http, mkdirp, xlsx;
    sails.log.debug("Hit the FileController/parse_users");
    http = require('http');
    fs = require('fs');
    xlsx = require('node-xlsx');
    mkdirp = require('mkdirp');
    return mkdirp('./.tmp/excel_sheets', function(err) {
      var tempFile;
      if (err) {
        return sails.log.debug("Can't create dir " + (JSON.stringify(err)));
      } else {
        sails.log.debug("Dir created waheeeey");
        fs.closeSync(fs.openSync('./.tmp/excel_sheets/bla.xls', 'w'));
        tempFile = fs.createWriteStream('./.tmp/excel_sheets/bla.xls');
        return tempFile.on('open', function(fd) {
          return http.get('http://s3.amazonaws.com/subzapp/Lakewood/Louisblabla.xls', function(response) {
            return response.on('data', function(chunk) {
              tempFile.write(chunk);
            }).on('end', function() {
              var obj;
              tempFile.end();
              sails.log.debug('yippee');
              obj = xlsx.parse('./.tmp/excel_sheets/bla.xls');
              sails.log.debug("Object " + (JSON.stringify(obj)));
              return res.json(obj);
            });
          });
        });
      }
    });
  },
  parse_players: function(req, res) {
    var AWS, Promise, params, s3, xlsx;
    sails.log.debug("Hit the file controller/aws");
    xlsx = require('node-xlsx');
    Promise = require('bluebird');
    sails.log.debug(JSON.stringify(req.body));
    AWS = require('aws-sdk');
    AWS.config.update({
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    });
    s3 = Promise.promisifyAll(new AWS.S3());
    AWS.config.update({
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    });
    return Promise.resolve(params = {
      Bucket: 'subzapp',
      Delimiter: '/',
      Prefix: '2/1/'
    }, s3.listObjectsAsync(params).then(function(stuff) {
      sails.log.debug("S3");
      sails.log.debug("s3 stuff " + (JSON.stringify(stuff)));
      return [
        stuff.Contents, s3.getObjectAsync({
          Bucket: 'subzapp',
          Key: stuff.Contents[0].Key
        }), Team.findOne({
          id: req.query.team_id
        })
      ];
    }).spread(function(s3_bucket, s3_file, team) {
      var obj, player_array;
      sails.log.debug("Bucket " + (JSON.stringify(s3_bucket)));
      sails.log.debug("Bucket " + s3_file);
      obj = xlsx.parse(s3_file.Body);
      player_array = obj[0].data;
      player_array.splice(0, 1);
      User.create_players(player_array, function(err, players) {
        sails.log.debug("Players " + (JSON.stringify(players)));
        if (err != null) {
          return sails.log.debug("Players error " + (JSON.stringify(err)));
        }
      });
      return res.json(obj[0].data);
    }));
  },
  download_file: function(req, res) {
    var AWS, params, s3;
    sails.log.debug("Hit the FileController/download_file");
    sails.log.debug("Query " + req.query);
    AWS = require('aws-sdk');
    AWS.config.update({
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    });
    s3 = new AWS.S3;
    params = {
      Bucket: 'subzapp',
      Delimiter: '/',
      Prefix: '1/1/'
    };
    return s3.listObjects(params, function(err, data) {
      if (err) {
        throw err;
      }
      sails.log.debug(JSON.stringify(data));
    });
  }
};
